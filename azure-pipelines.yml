schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master
  always: true

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - group: sonar-dotnet-variables
  - group: sonarsource-build-variables

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref:  refs/tags/v1.0.6

stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'build'
    burgrType: 'build'
    stageName: 'build'
    stageDisplayName: 'Build the dotnet analyzers and stage to repox'
    jobs:
    - job: dotnetBuildjob
      displayName: 'Build and package'

      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: NuGetCommand@2
        displayName: "Restore NuGet packages"
        inputs:
          restoreSolution: '$(solution)'

      - powershell: |
          # Calculate the file path
          $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
          Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
          # Read the version from the file
          [xml]$versionProps = Get-Content "$versionFilePath"
          $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
          Write-Host "Sonar project version is '${sonarProjectVersion}'"
          # Set the variable to it can be used by other tasks
          Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
        displayName: 'Read Sonar project version from the versions.props file'
      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'

      - task: DownloadSecureFile@1
        displayName: 'Download snk file'
        name: snk
        inputs:
          secureFile: SonarSourceSecret.snk

      - task: DownloadSecureFile@1
        displayName: 'Download pfx file'
        inputs:
          secureFile: 'sonarsource-2019-2021.pfx'

      - task: VSBuild@1
        displayName: "Build SonarAnalyzer solution"
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          msbuildArgs: '/p:DeployExtension=false /p:SignAssembly=true /p:DefineConstants=SignAssembly /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:pfxCertificatePath="$(pfx.secureFilePath)" /p:pfxPassword="$(pfxPassword)" /p:pfxSha1=$(pfxSha1) /p:Sha1=$(Build.SourceVersion) /p:BuildNumber=$(Build.BuildId) /p:WarningLevel=0'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish analyzer binaries as pipeline artifact'
        inputs:
          path: sonaranalyzer-dotnet/its/binaries/
          artifact: Binaries

      - task: PublishPipelineArtifact@1
        displayName: 'Publish rule descriptor binaries as pipeline artifact'
        inputs:
          path: sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\bin
          artifact: RuleDescriptorBin

      - task: NuGetCommand@2
        displayName: "Build NuGet packages"
        inputs:
          command: pack
          packagesToPack: 'sonaranalyzer-dotnet/src/**/*.nuspec'
          configuration: '$(BuildConfiguration)'
          packDestination: '$(Build.ArtifactStagingDirectory)/packages'
          verbosityPack: 'Detailed'
          publishPackageMetadata: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish NuGet packages as build artifacts'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/packages'
          artifactName: 'NuGet Packages'

      - task: ArtifactoryNuGet@1
        displayName: 'Publish SonarAnalyzer.CFG.CSharp NuGet on repox'
        inputs:
          command: 'push'
          artifactoryService: 'Repox artifactory'
          targetDeployRepo: '$(ARTIFACTORY_NUGET_REPO)'
          pathToNupkg: '$(Build.ArtifactStagingDirectory)/packages/SonarAnalyzer.CFG.CSharp.*.nupkg'

- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    stageDisplayName: 'Run dotnet analyzers ITs and publish SC QG'
    stageDependencies: build

    jobs:
    - job: runUnitTestsJob
      displayName: 'Run dotnet unit tests'

      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 5.0.100-preview.6.20318.15
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Install NET 5 SDK preview"

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 3.1.201
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Install dotnet 3.1 LTS"

      - powershell: |
          dotnet --list-sdks
          dotnet --version
        displayName: 'List dotnet versions and current version'
      - powershell: |
          # Calculate the file path
          $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
          Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
          # Read the version from the file
          [xml]$versionProps = Get-Content "$versionFilePath"
          $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
          Write-Host "Sonar project version is '${sonarProjectVersion}'"
          # Set the variable to it can be used by other tasks
          Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
        displayName: 'Read Sonar project version from the versions.props file'
      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azure pipeline variables'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'

      - task: SonarCloudPrepare@1
        displayName: 'Run Code Analysis - Begin Step (Pull Request)'
        condition: eq(variables['Build.Reason'], 'PullRequest')
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer .Net'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.xml"
            sonar.analysis.buildNumber=$(Build.BuildId)
            sonar.analysis.pipeline=$(Build.BuildId)
            sonar.analysis.sha1=$(System.PullRequest.SourceCommitId)
            sonar.analysis.prNumber=$(System.PullRequest.PullRequestNumber)
            sonar.analysis.repository=$(Build.Repository.ID)
      - task: SonarCloudPrepare@1
        displayName: 'Run Code Analysis - Begin Step (master or branch)'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer .Net'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.xml"
            sonar.analysis.buildNumber=$(Build.BuildId)
            sonar.analysis.pipeline=$(Build.BuildId)
            sonar.analysis.sha1=$(Build.SourceVersion)
            sonar.analysis.repository=$(Build.Repository.ID)
      - powershell: |
          cd sonaranalyzer-dotnet
          $testProjFileName = "tests\SonarAnalyzer.UnitTest\SonarAnalyzer.UnitTest.csproj"
          Write-Host "Add .Net 5 target for UnitTest project"
          ((Get-Content -Path $testProjFileName -raw) -Replace "net48;netcoreapp3.1","net48;netcoreapp3.1;net5") | Set-Content -Path $testProjFileName
          Write-Host "Build UnitTest project"
          dotnet build $testProjFileName -c $(BuildConfiguration)
          Write-Host "Run tests for .Net 4.8 binary and compute coverage"
          $(NUGET_PACKAGES)\opencover\4.7.922\tools\OpenCover.Console.exe -target:"C:/Program Files/dotnet/dotnet.exe" -targetargs:"test tests\SonarAnalyzer.UnitTest\bin\$(BuildConfiguration)\net48\SonarAnalyzer.UnitTest.dll --nologo" -returntargetcode -filter:"+[SonarAnalyzer.CFG]* +[SonarAnalyzer]* +[SonarAnalyzer.CSharp]* +[SonarAnalyzer.Utilities]* +[SonarAnalyzer.VisualBasic]*" -output:tests\coverage.xml -oldStyle -register:Path32
          Write-Host "Run tests on .Net Core 3.1"
          dotnet test $testProjFileName -c $(BuildConfiguration) --no-build --no-restore --nologo -f netcoreapp3.1
          Write-Host "Run tests on .Net 5"
          dotnet test $testProjFileName -c $(BuildConfiguration) --no-build --no-restore --nologo -f net5
          cd ..
        displayName: 'Run .Net unit tests'
      - task: SonarCloudAnalyze@1
        displayName: 'Run Code Analysis - End Step'

      - task: SonarCloudPublish@1
        displayName: 'Run Code Analysis - Publish QG'
        inputs:
          pollingTimeoutSec: '300'

    - job: runIntegrationTestsJob
      displayName: 'Run SonarAnalyzer integration tests'

      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download binaries to test'
        inputs:
          artifact: Binaries
          targetPath: 'sonaranalyzer-dotnet/its/binaries/'

      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 5.0.100-preview.6.20318.15
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Install NET 5 SDK preview"

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 3.1.201
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Install dotnet 3.1 LTS"

      - powershell: |
          dotnet --list-sdks
          dotnet --version
        displayName: 'List dotnet versions and current version'
      - task: PowerShell@2
        displayName: 'Run SonarAnalyzer integration tests'
        inputs:
          filePath: 'sonaranalyzer-dotnet/its/regression-test.ps1'
          workingDirectory: 'sonaranalyzer-dotnet/its'

    - job: runJavaBuild
      displayName: 'Run Java build'

      steps:

      - task: DownloadPipelineArtifact@2
        displayName: 'Download .Net binaries for Maven build'
        inputs:
          artifact: Binaries
          targetPath: 'sonaranalyzer-dotnet/src/SonarAnalyzer.Vsix/bin/$(buildConfiguration)/'

      - task: DownloadPipelineArtifact@2
        displayName: 'Download rule descriptor binaries'
        inputs:
          artifact: RuleDescriptorBin
          targetPath: sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\bin

      - task: Cache@2
        displayName: "Cache Maven local repo"
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'

      - template: update-maven-version-steps.yml
        parameters:
          mavenSettingsFilePath: $(mavenSettings.secureFilePath)

      - task: Maven@3
        displayName: 'Run Maven deploy'
        env:
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          GITHUB_BRANCH: $(Build.SourceBranchName)
          GIT_SHA1: $(Build.SourceVersion)
        inputs:
          goals: 'deploy'
          options: >-
            $(commonMavenArguments)
            --settings $(mavenSettings.secureFilePath)
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenOptions: $(MAVEN_OPTS)


    - job: runJavaUnitTests
      displayName: 'Run Java Unit Tests'
      dependsOn: runJavaBuild

      steps:

      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'

      - powershell: |
          # Calculate the file path
          $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
          Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
          # Read the version from the file
          [xml]$versionProps = Get-Content "$versionFilePath"
          $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
          Write-Host "Sonar project version is '${sonarProjectVersion}'"
          # Set the variable to it can be used by other tasks
          Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
        displayName: 'Read Sonar project version from the versions.props file'
      - template: update-maven-version-steps.yml
        parameters:
          mavenSettingsFilePath: $(mavenSettings.secureFilePath)

      - task: DownloadPipelineArtifact@2
        displayName: 'Download .Net binaries for Maven build'
        inputs:
          artifact: Binaries
          targetPath: 'sonaranalyzer-dotnet/src/SonarAnalyzer.Vsix/bin/$(buildConfiguration)/'

      - task: DownloadPipelineArtifact@2
        displayName: 'Download rule descriptor binaries'
        inputs:
          artifact: RuleDescriptorBin
          targetPath: 'sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\bin'

      - task: Cache@2
        displayName: "Cache Maven local repo"
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      - task: SonarCloudPrepare@1
        displayName: 'Prepare code analysis for Java plugin'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'Other'

      - task: Maven@3
        displayName: 'Run Maven verify, UTs with SonarCloud'
        inputs:
          goals: 'verify sonar:sonar'
          options: -B --settings $(mavenSettings.secureFilePath) -Pcoverage -Dsonar.projectVersion=$(SONAR_PROJECT_VERSION)
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          testRunTitle: 'UTs on Windows'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenOptions: $(MAVEN_OPTS)
          sonarQubeRunAnalysis: true
          sqMavenPluginVersionChoice: 'latest'

      - task: SonarCloudPublish@1
        displayName: 'Run Code Analysis - Publish QG'
        inputs:
          pollingTimeoutSec: '300'

      - bash: git checkout .
        name: revertPomChanges
        displayName: Revert changes made to pom.xml to not break cache feature

    - job: runJavaIntegrationTests
      displayName: 'Run Java Integration Tests'
      dependsOn: runJavaBuild

      steps:

      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'

      - template: update-maven-version-steps.yml
        parameters:
          mavenSettingsFilePath: $(mavenSettings.secureFilePath)

      - task: DownloadPipelineArtifact@2
        displayName: 'Download .Net binaries for Maven build'
        inputs:
          artifact: Binaries
          targetPath: 'sonaranalyzer-dotnet/src/SonarAnalyzer.Vsix/bin/$(buildConfiguration)/'

      - task: DownloadPipelineArtifact@2
        displayName: 'Download rule descriptor binaries'
        inputs:
          artifact: RuleDescriptorBin
          targetPath: 'sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\bin'

      - task: Cache@2
        displayName: "Cache Maven local repo"
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)

      - task: Maven@3
        displayName: 'Run Maven install'
        env:
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
        inputs:
          goals: 'install'
          options: >-
            $(commonMavenArguments)
            --settings $(mavenSettings.secureFilePath)
            -DskipTests=true
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenOptions: $(MAVEN_OPTS)

      - task: Maven@3
        displayName: 'Run MVN ITs'
        env:
          ARTIFACTORY_API_KEY: $(ARTIFACTORY_API_KEY)
          GITHUB_TOKEN: $(GITHUB_TOKEN)
        inputs:
          mavenPomFile: its/pom.xml
          goals: 'verify'
          options: -B --settings $(mavenSettings.secureFilePath)
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          testRunTitle: 'ITs on Windows'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenOptions: $(MAVEN_OPTS)

      - bash: git checkout .
        name: revertPomChanges
        displayName: Revert changes made to pom.xml to not break cache feature

- stage: promoteNugets
  displayName: Promote NuGet on repox
  dependsOn: qa
  condition: succeeded()
  jobs:
    - job: promoteRepox
      displayName: 'Promote SonarAnalyzer.CFG.CSharp NuGet on repox'
      steps:
        - powershell: |
            # Calculate the file path
            $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
            Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
            # Read the version from the file
            [xml]$versionProps = Get-Content "$versionFilePath"
            $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
            Write-Host "Sonar project version is '${sonarProjectVersion}'"
            # Set the variable to it can be used by other tasks
            Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
          displayName: 'Read Sonar project version from the versions.props file'
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'

        - bash: pip3 install requests

        - task: PythonScript@0
          name: promoteRepox
          inputs:
            failOnStderr: true
            scriptSource: 'inline'
            script: |
              import requests
              import os
              import sys
              version = '$(SONAR_PROJECT_VERSION).$(Build.BuildId)'
              isPr = '$(Build.Reason)' == 'PullRequest'
              sourceRepo = os.environ['ARTIFACTORY_NUGET_REPO']
              targetRepo = None
              if isPr:
                targetRepo = sourceRepo.replace('qa', 'dev')
              else:
                targetRepo = sourceRepo.replace('qa', 'public')
              artifact = f'SonarAnalyzer.CFG.CSharp.{version}.nupkg'
              print(f'Promoting nuget {artifact} from {sourceRepo} to {targetRepo}')
              url = f'$(ARTIFACTORY_URL)/api/move/{sourceRepo}/{artifact}?to=/{targetRepo}/{artifact}'
              headers = {'Content-Type': 'application/json'}
              response = requests.post(url, headers=headers, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
              fixedBranch = ''
              if not isPr:
                # Cannot use BUILD_SOURCEBRANCHNAME because of https://github.com/Microsoft/azure-pipelines-agent/issues/838
                branch = os.environ['BUILD_SOURCEBRANCH']
                refPrefix = "refs/heads/"
                if branch.startswith(refPrefix):
                  fixedBranch = branch[len(refPrefix):]
              print("##vso[task.setvariable variable=fixedBranch;isOutput=true]" + fixedBranch)
              promoted = response.status_code == 200
              if not promoted:
                print('[!] [{0}] Server Error'.format(response.status_code), file=sys.stderr)
    - job: nugetBurgrFailed
      dependsOn: promoteRepox
      pool: server
      condition: failed()
      steps:
      - template: notify-burgr-steps.yml@commonTemplates
        parameters:
          name: 'artifacts'
          type: 'promotion'
          status: 'failed'
          fixedBranch: $(fixedBranch)

    - job: nugetBurgrCanceled
      dependsOn: promoteRepox
      pool: server
      condition: canceled()
      steps:
      - template: notify-burgr-steps.yml@commonTemplates
        parameters:
          name: 'artifacts'
          type: 'promotion'
          status: 'canceled'
          fixedBranch: $(fixedBranch)

- template: promote-stage.yml@commonTemplates
  parameters:
    stageDependencies:
    - promoteNugets